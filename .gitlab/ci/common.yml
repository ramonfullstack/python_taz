cache: &global_cache
  key:
    files:
      - requirements/*.txt
  paths:
    - venv/
  policy: pull

.set-execution-tag: &set-execution-tag
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success

.set-execution-release: &set-execution-release
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success

.set-execution-dev: &set-execution-dev
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
      when: on_success

.set-execution-all: &set-execution-all
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
    - if: "$CI_MERGE_REQUEST_IID"
      when: on_success

include:
  - project: "luizalabs/ci-knife"
    ref: master
    file: "templates/report-sonar.yaml"

install dependencies:
  <<: *set-execution-all
  stage: install
  cache:
    <<: *global_cache
    policy: pull-push
  script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - apt-get update -qq
    - apt-get -y install tidy
    - pip install setuptools==56.0.0
    - make requirements

lint:
  <<: *set-execution-all
  stage: tests
  cache:
    <<: *global_cache
  script:
    - source venv/bin/activate
    - make lint
  dependencies:
    - install dependencies
  needs:
    - install dependencies

unit tests:
  <<: *set-execution-all
  stage: tests
  cache:
    <<: *global_cache
  script:
    - source venv/bin/activate
    - make test-coverage
  dependencies:
    - install dependencies
  needs:
    - install dependencies
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+\%)$/'
  artifacts:
    expire_in: 30 mins
    paths:
      - coverage.xml

commitlint:
  cache: []
  dependencies: []
  image: $CIKNIFE_IMAGE
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: always
  script:
    - ci-knife commitlint
  stage: code analysis

safety check:
  <<: *set-execution-all
  stage: code analysis
  script:
    - source venv/bin/activate
    - make check-vulnerabilities
  dependencies:
    - install dependencies
  needs:
    - install dependencies
    - unit tests
    - lint

sonar:
  <<: *set-execution-release
  stage: code analysis
  dependencies:
    - unit tests
    - lint
  needs:
    - unit tests
    - lint

sonar staging:
  <<: *set-execution-dev
  stage: code analysis
  dependencies:
    - unit tests
    - lint
  needs:
    - unit tests
    - lint

security gate:
  <<: *set-execution-release
  stage: code analysis
  image: $CIKNIFE_IMAGE
  script:
    - ci-knife security-scanner

container builder:
  <<: *set-execution-all
  image: $CIKNIFE_IMAGE
  tags:
    - global-docker-tls
  services:
    - docker:26-dind
  variables:
    DOCKER_REPO: "$IMAGE_REGISTRY/$IMAGE_TRIBE/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA"
  stage: build
  before_script:
    - echo -n "$GCLOUD_KEY" | base64 -d > /root/key.json
    - docker login -u _json_key --password-stdin $IMAGE_REGISTRY < /root/key.json
  script:
    - docker build  -t "$DOCKER_REPO" . --build-arg PIP_EXTRA_INDEX_URL=${PIP_EXTRA_INDEX_URL}
    - docker push "$DOCKER_REPO"

container release:
  <<: *set-execution-tag
  image: $CIKNIFE_IMAGE
  tags:
    - global-docker-tls
  services:
    - docker:26-dind
  variables:
    SOURCE_IMAGE: "$IMAGE_REGISTRY/$IMAGE_TRIBE/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA"
    TARGET_IMAGE: "$IMAGE_REGISTRY/$IMAGE_TRIBE/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
  stage: release
  dependencies:
    - container builder
  before_script:
    - echo -n "$GCLOUD_KEY" | base64 -d > /root/key.json
    - docker login -u _json_key --password-stdin $IMAGE_REGISTRY < /root/key.json
  script:
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"

create release:
  cache: []
  dependencies: []
  image: $CIKNIFE_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  script:
    - ci-knife create-release --without-npm
  stage: release
